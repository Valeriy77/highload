Можно ли добиться линеаризуемости при проблемах с сетью и разделения системы? Объясните свою точку зрения.
Линеаризуемость (в смысле «целостностью» в контексте САР),  Если операция В началась после успешного завершения операции А, тогда операция В должна видеть состояние системы в момент завершении А или же в новом состоянии. Налицо прямая корелляция реализуемости и проблемах с сетью. Ответ - добиться на практике невозможно, что также подтверждает Михаил в лекции.
https://habr.com/ru/articles/258145/

Можно ли добиться read committed isolation level при проблемах с сетью и разделения системы? А repeatable read? Объясните свою точку зрения. 
Для уровня изоляции Read committed допустимы следующие особые условия чтения данных: Неповторяемое чтение — транзакция повторно читает те же данные, что и раньше, и обнаруживает, что они были изменены другой транзакцией (которая завершилась после первого чтения).  
Чем строже уровень изоляции, тем труднее обеспечивать стабильную и быструю работу в условиях сбоев сети и других проблем. Важным фактотром в случае проблем с сетью в перыую очередь является сама СУБД обеспечивающая Partition Tolerance.

Можно ли добиться repeatable read isolation level при проблемах с сетью и разделения системы? Объясните свою точку зрения:

Serializable:
>>Unfortunately, Serializable is generally considered to be impractical, even for a non-distributed database. It is not a coincidence that all the existing popular databases like Postgres and MySQL recommend against it.
https://planetscale.com/blog/pitfalls-of-isolation-levels-in-distributed-databases
>>A Serializable setting is also subject to frequent deadlocks. 
При проблемах с сетью обеспечение repeatable read isolation level и Serializable приведет к существенным задержкам при работе системы.


Возможна ли в Leaderless replication линеаризуемость? Объясните почему. Исходя из лекции Михаила, в МL репликации линеаризуемости добиться на практике нереально, так как необходимо читать всегда с лидера. Ту же проблему имеем с Leaderless replication. 
Линеаризуемость - гарантия "свежести" для чтений и записей объекта.
В случае leaderless соблюдение формулы w + r > n, казалось бы, должно обеспечивать линеаризуемость, однако бывают sloppy quorums и last write wins, которые мешают линеаризуемости.

Даже строгий кворум не гарантирует линеаризуемость. Представим, что есть три реплики - А, Б, В. Клиент 1 пишет значение 1, оно пишется в А, а в Б и В - еще не успело. Клиент 2 читает из А и Б, получает 0 и 1, выбирает 1. Клиент 3 читает из Б и В, получает 0 и 0, выбирает 1.

В результате клиент 3 прочитал после клиента 2, но получил старое значение.

Таким образом, безопаснее всего считать, что leaderless не линеаризуемы.
https://y-gagar1n.github.io/hows-that-again/blog/books/designing-data-intensive-applications
